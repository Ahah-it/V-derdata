@page "/fetchDaily"

@using Väderdata.Data
@inject WeatherQueries query;

<h1>Daily Weather aggregates</h1>



<button @onclick=ToggleButtonIndoor class="btn btn-primary">@toggleLocation</button>
<button @onclick=ToggleButtonDescending class="btn btn-primary">@toggleDescending</button>


<button @onclick=GetAverageTemperatureList class="btn btn-primary">Sort by Temperature</button>
<button @onclick=GetAverageHumidityList class="btn btn-primary">Sort by Humidity</button>
<button @onclick=GetMouldRiskList class="btn btn-primary">Sort by Mould Risk</button>



<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Location</th>
            <th>Temperature</th>
            <th>Humidity</th>
            <th>Mould Risk</th>
            <th>Season</th>
        </tr>
    </thead>
    <tbody>
        @if (dailyList != null)
        {
            @foreach (var m in dailyList)
            {
        <tr>
            <td>@m.Date.Date.ToShortDateString()</td>
            <td>@m.Location</td>
            <td>@String.Format("{0:#,##0.00}", m.AverageTemperature)</td>
            <td>@String.Format("{0:#,##0.00}", m.AverageHumidity)</td>
            <td>@String.Format("{0:#,##0.00}", m.MouldRisk)</td>
            <td>@m.Season</td>
        </tr>
            }
        }
    </tbody>
</table>

@code {

    List<WeatherView> dailyList = new List<WeatherView>();
    string toggleLocation = "Outdoor";
    string toggleDescending = "Ascending";
    bool indoor;
    bool descending;

    void ToggleButtonIndoor()
    {
        if (indoor)
        {
            toggleLocation = "Outdoor";
            indoor = false ;
        } else
        {
            toggleLocation = "Indoor";
            indoor = true;
        }
    }

    void ToggleButtonDescending()
    {
        if (descending)
        {
            toggleDescending = "Ascending";
            descending = false;
        }
        else
        {
            toggleDescending = "Descending";
            descending = true;
        }
    }

    async Task GetAverageTemperatureList()
    {
        dailyList = await Task.Run(() => query.GetViewOrderedByTemperature(descending, indoor));
    }

    async Task GetAverageHumidityList()
    {
        dailyList = await Task.Run(() => query.GetViewOrderedByHumidity(descending, indoor));
    }

    async Task GetMouldRiskList()
    {
        dailyList = await Task.Run(() => query.GetViewOrderedByMouldRisk(descending, indoor));
    }

    async Task GetAutumn()
    {
        query.SetSummerSeason();
        query.SetAutumnSeason();
        query.SetWinterSeason();
    }

    protected override async Task OnInitializedAsync()
    {
        indoor = false;
        descending = false;
    }
}

